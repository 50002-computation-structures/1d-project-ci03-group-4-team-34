module alu (
    input a[32],
    input b[32],
    input alufn[6],
    output out[32],
    output z,
    output v,
    output n
) {
    // Instantiating submodules
    adder adder(#SIZE(32));
    compare compare();
    boolean boolean(#SIZE(32));
    shifter shifter();
    multiplier multiplier();
    divider divider();
    modulus modulus();
    neg neg();
    not_alc not_alc();
    nand_alc nand_alc();
    

    always {
        // Adder logic
        adder.a = a;
        adder.b = b;
        adder.alufn_signal = alufn;
        z = adder.z;
        v = adder.v;
        n = adder.n;
        
        // Compare logic
        compare.z = adder.z
        compare.v = adder.v
        compare.n = adder.n
        compare.alufn = alufn

        // Boolean logic
        boolean.a = a
        boolean.b = b 
        boolean.alufn = alufn
        
        // Shifter logic
        shifter.a = a
        shifter.b = b
        shifter.alufn = alufn
        
        // Multiplier logic
        multiplier.a = a
        multiplier.b = b
        
        // Divider Logic
        divider.a = a
        divider.b = b
        
        // modulus logic
        modulus.a = a
        modulus.b = b
        
        // neg logic
        neg.a = a;
        
        // not logic
        not_alc.a = a;
        
        // nand logic
        nand_alc.a = a;
        nand_alc.b = b;
        
        // Explicit 6-bit ALUFN comparisons
        if (alufn == 6b000000) {          // ADD
            out = adder.out;
        } else if (alufn == 6b000001) {   // SUB
            out = adder.out;
        } else if (alufn == 6b000010) {   // MUL
            out = multiplier.mul;
        } else if (alufn == 6b000011) {   // DIV
            out = divider.d;
        } else if (alufn == 6b000100) {   // MOD
            out = modulus.m;
        } else if (alufn == 6b000101) {   // NEG
            out = neg.out;
        } else if (alufn == 6b011000) {   // AND
            out = boolean.bool;
        } else if (alufn == 6b011110) {   // OR
            out = boolean.bool;
        } else if (alufn == 6b011011) {   // NOT
            out = not_alc.out;
        } else if (alufn == 6b011001) {   // NAND
            out = nand_alc.out;
        } else if (alufn == 6b010110) {   // XOR
            out = boolean.bool;
        } else if (alufn == 6b011010) {   // LDR (A)
            out = a;
        } else if (alufn == 6b100000) {   // SHL
            out = shifter.shift;
        } else if (alufn == 6b100001) {   // SHR
            out = shifter.shift;
        } else if (alufn == 6b100011) {   // SRA
            out = shifter.shift;
        } else if (alufn == 6b110011) {   // CMPEQ
            out = c{31x{b0}, compare.cmp};
        } else if (alufn == 6b110101) {   // CMPLT
            out = c{31x{b0}, compare.cmp};
        } else if (alufn == 6b110111) {   // CMPLE
            out = c{31x{b0}, compare.cmp};
        } else {
            out = 32b0;  // Default case
        }
    }
}