module ram_mode #(
    COLUMN_DIMENSION = 16d16 : COLUMN_DIMENSION > 0,
    ROW_DIMENSION = 16d16 : ROW_DIMENSION > 1,
    PIXEL_COUNT = 16d256 : PIXEL_COUNT > 0,
    BUFFER_SIZE = 1024 : BUFFER_SIZE > 0 // ensure this value is larger than PIXEL_COUNT * $clog2(COLOR_ENCODING)
) (
    input clk,              // 100MHz clock
    input rst,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8],      // DIP switches on IO Shield
    output data
) {
    
    const CLK_FREQ = $is_sim() ? 1000 : 100000000
    // how many different encodings are used? As example, we use 4 colors, hence ENCODING_AMOUNT is 4
    const ENCODING_AMOUNT = 4 
    
    // OFF WHITE (11), DIM BLUE (10), DIM RED (01), OFF(00)
    const LEDCOLOR = {24h0F0F0F, 24h030000, 24h000300, 24h000000} 
    
    index_reverser index_reverser(#COLUMN_DIMENSION(COLUMN_DIMENSION), #SIZE($clog2(PIXEL_COUNT)))
    
    
    .clk(clk) {
        .rst(rst) {
            
            alu alu_inst
            data_ram ram(
                #ROW_DIMENSION(ROW_DIMENSION), 
                #ENCODING_AMOUNT(4), 
                #COLUMN_DIMENSION(COLUMN_DIMENSION)
            )
            
            // 4. WS2812B LED Driver
            ws2812b_driver driver(#PIXEL_COUNT(PIXEL_COUNT))
            
            // 5. FSM State Register
            dff fsm_state[4](#INIT(0))  // Up to 16 states
            
            // ‚è≥ 6. Delay / Countdown Timer (used for timeouts)
            dff delay_counter[27](#INIT(0))
            
            // üé¨ 7. Toggle trigger for driver.update (used for one-pulse display refresh)
            dff on_off_toggle
            
            
            
            // üü© 8. Optional temporary value registers (if needed)
            // dff temp_value[32]
        }
    }
    
    // Register file I/O
    sig reg_we
    sig reg_wa[4]
    sig reg_wd[32]
    sig reg_ra1[4]
    sig reg_ra2[4]
    sig reg_rd1[32]
    sig reg_rd2[32]
    // fsm sigs
    sig alu_result[32]
    sig alu_a[32]
    sig alu_b[32]
    sig alu_alufn[6]
    sig we
    sig wa[4]
    sig wdsel[2]
    sig asel[2]
    sig bsel[2]
    sig ra1[4]
    sig ra2[4]
    sig current_state[5]
    // ALU control
    sig alufn[6]
    sig a_sel[2]
    sig b_sel[2]
    sig wsel[2]
    sig alu_inst[6]
    // user inputs 
    button_conditioner input_button[5](.clk(5x{{clk}}), #CLK_FREQ(5x{{CLK_FREQ}}))
    edge_detector input_edge[5](.clk(5x{{clk}}), #RISE(5x{{1}}), #FALL(5x{{0}}))
    sig bomb_pressed
    sig pancake_pressed
    sig milkshake_pressed
    
    fsm control_unit (
        .clk(clk),
        .rst(rst),
        .alu_out(alu_result)
    )
    
    
    always {
        alu_inst.alufn = control_unit.alu_alufn
        wa = control_unit.wa
        we = control_unit.we
        wdsel = control_unit.wdsel
        asel = control_unit.asel
        bsel = control_unit.bsel
        ra1 = control_unit.ra1
        ra2 = control_unit.ra2
        alu_a = control_unit.alu_a
        alu_b = control_unit.alu_b
        data = driver.data
        // Map only the used buttons: [3] left = pancake, [4] right = milkshake, [0] center = bomb
        input_button.in = c{
            io_button[0],  // [0] = Center button = Bomb
            1b0,           // [1] = unused
            1b0,           // [2] = unused
            io_button[3],  // [3] = Left button = Pancake
            io_button[4]   // [4] = Right button = Milkshake
        }
        
        alu_inst.a = alu_a
        alu_inst.b = alu_b
        alu_inst.alufn = alu_alufn
        alu_result = alu_inst.out
        // Edge detect rising edge
        input_edge.in = input_button.out
        
        // Assign readable signal names for gameplay actions
        bomb_pressed = input_edge.out[0]
        pancake_pressed = input_edge.out[3]
        milkshake_pressed = input_edge.out[4]
    }
}