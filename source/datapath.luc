module datapath#(
    SLOW_CLOCK_DIV ~ 26 : SLOW_CLOCK_DIV > 0,
    FAST_CLOCK_DIV ~ 21 : FAST_CLOCK_DIV > 0
)(
    input p1_button,
    input p2_button,
    
    input clk,  // clock
    input rst,  // reset
    
    // output to LEDs/7segments
    
    output current_counter_out[32],
    output timer_out[32],
    output slow_clock_out
    
    // debug signals
) {
    
    // Temporary variables
    sig input_alu_a[32]
    sig input_alu_b[32]
    sig regfile_data[32]
    sig regfile_data_write[32]
    sig alu_out[32]

    sig fsm_state_out[32]
    sig regfile_rd2[32]
    
    alu alu
    
    .clk(clk){
        variable_timer variable_timer_clock(#FAST_CLOCK_DIV(FAST_CLOCK_DIV), .rst(rst))
        counter game_timer_clock(#SIZE(1), #DIV(SLOW_CLOCK_DIV), .rst(rst))
        
        edge_detector edge_detector_variable_timer (#RISE(1), #FALL(0), .in(variable_timer_clock.out))
        edge_detector edge_detector_game_timer (#RISE(1), #FALL(0), .in(game_timer_clock.value))
        
        fsm game_cu(
            .rst(rst),
            .alu_out(alu_out)
            
        )
        regfile regfile(
            .rst(rst),
            .we(game_cu.we),
            .wa(game_cu.wa),
            .wd(regfile_data),
            .ra1(game_cu.ra1),
            .ra2(game_cu.ra2)
        )
    }
    
    
    
    
    
    always {
        
        fsm_state_out = game_cu.current_state
        
        input_alu_a = 0
        input_alu_b = 0
        regfile_data_write = 0
        
        alu_out = alu.out[7:0]
        
        
        regfile_rd2 = regfile.rd2
        
        /* asel mux */
        // === ASEL MUX ===
        case (game_cu.asel) {
            b00: input_alu_a = regfile.rd1      // from regfile port A
            b01: input_alu_a = 32d0                      // constant 0 (not used here but can be added)
            b10: input_alu_a = 32d1                      // constant 1
            b11: input_alu_a = 32d5                      // constant 5
            default: input_alu_a = 32d0
        }
        
        // === BSEL MUX ===
        case (game_cu.bsel) {
            b00: input_alu_b = regfile.rd2        // from regfile port B
            b01: input_alu_b = 32d0                      // constant 0
            b10: input_alu_b = 32d1                      // constant 1
            b11: input_alu_b = 32d5                      // constant 5
            default: input_alu_b = 32d0
        }
        
        /* insert alu assignments here */
        // === ALU INPUTS ===
        alu.a = input_alu_a         // connected from asel mux output
        alu.b = input_alu_b         // connected from bsel mux output
        alu.alufn = game_cu.alu_alufn   // control signal from FSM
        
        /* wdsel mux */
        // === WDSEL MUX ===
        case (game_cu.wdsel) {
            b00: regfile_data = alu.out         // ALU output
            b01: regfile_data = 32d0                 // optional: default or unused case
            b10: regfile_data = 32d0                 // optional: default or unused case
            b11: regfile_data = 32d5                 // constant RNG-related value
            default: regfile_data = 32d0             // fallback
        }
        
        regfile_data = regfile_data_write
        
        timer_out = regfile.timer_out
        current_counter_out = regfile.current_player_score_out
        regfile_data_write = regfile_data_write[7:0]
        slow_clock_out = game_timer_clock.value  // or variable_timer_clock.out if needed
        
        
    }
}