module adder #(
    SIZE ~ 32 : SIZE > 1
)(
    input a[SIZE],
    input b[SIZE],
    input alufn_signal[6], // 0 is add, 1 is subtract
    output out[SIZE],
    output z,
    output v,
    output n
) {
    rca rca(#SIZE(32));
    sig xb[SIZE];
    
    always {
        // rca.a is A[31:0]
        rca.a = a
        
        // B[31:0] XOR with 32x{ALUFN[0]} is xb 
        xb = b ^ 32x{alufn_signal[0]}
        rca.b = xb
        
        // rca.cin is ALUFN[0]
        rca.cin = alufn_signal[0]
        
        // output of RCA
        out = rca.s
        
        // ZVN unit
        // Zero Flag
        // Simply performs a NOR reduction across all bits
        // If all bits are 0, it is 1. Otherwise 0. 
        z = ~|rca.s // NOR 
        
        // Overflow Flag
        // Set to 1 when sign of inputs same but sign of output different. 
        // Case 1: Both inputs are positive, but the result is negative.
        // Case 2: Both inputs are negative, but the result is positive.
        v = (a[SIZE-1] & xb[SIZE-1] & ~rca.s[SIZE-1] | (~a[SIZE-1]) & ~xb[SIZE-1] & rca.s[SIZE-1])
        
        // Negative Flag
        // Simply checks the MSB. If it is 1 it is negative, if 0 it is positive.
        n = rca.s[SIZE-1] 
        
     
    }
}