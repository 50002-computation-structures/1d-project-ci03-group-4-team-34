module alu_automatic_tester#(
    CLK_FREQ ~ 1000 : CLK_FREQ > 0) 
(
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input io_dip[3][8],
    output io_led[3][8],
    output io_segment[8],
    output io_select[4]
) {
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16
    const TEST_DELAY = CLK_FREQ * 1; // 1 second delay
    .clk(clk) {
     
        edge_detector io_button_edge[5](#RISE(5x{{1}}), #FALL(5x{{0}}))
        button_conditioner io_button_cond[5](#CLK_FREQ(5x{{$resize(CLK_FREQ, $width(10000000))}})) 
        .rst(rst) {
            
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV)) 
            dff delay_counter[$clog2(TEST_DELAY)];     
        }
    }
    
    alu alu;
    
    // A values for test cases (32-bit hexadecimal)
    const A_TESTS = {
        // Arithmetic operations: ADD, SUB, MUL
        32h00000000,  // Test 0: ADD (0 + 0)
        32h00000005,  // Test 1: ADD (5 + 3)
        32hFFFFFFFF,  // Test 2: ADD (-1 + 1)
        32h00000005,  // Test 3: SUB (5 - 3)
        32h00000003,  // Test 4: SUB (3 - 5)
        32hFFFFFFFF,  // Test 5: SUB (-1 - (-1))
        32h00000005,  // Test 6: MUL (5 * 3)
        32hFFFFFFFE,  // Test 7: MUL (-2 * 2)
        // Logical operations: AND, OR, XOR
        32h000000FF,  // Test 8: AND (0xFF & 0x0F)
        32hAAAAAAAA,  // Test 9: AND (0xAAAAAAAA & 0x55555555)
        32h0F0F0F0F,  // Test10: OR (0x0F0F0F0F | 0xF0F0F0F0)
        32hAAAAAAAA,  // Test11: XOR (0xAAAAAAAA ^ 0x55555555)
        // Load (LDR)
        32h12345678,  // Test12: LDR (A = 0x12345678)
        // Shift operations: SHL, SHR, SRA
        32h00000005,  // Test13: SHL (5 << 1)
        32h80000000,  // Test14: SHL (0x80000000 << 1)
        32h80000000,  // Test15: SHR (0x80000000 >> 1)
        32h80000000,  // Test16: SRA (0x80000000 >> 1)
        32h00000005,  // Test17: CMPEQ (5 ==5)
        32h00000005,  // Test18: CMPEQ (5 ==3)
        32h00000003,  // Test19: CMPLT (3 <5)
        32h00000005,  // Test20: CMPLT (5 <3)
        32h80000000,  // Test21: CMPLT (0x80000000 <1)
        32h00000005,  // Test22: CMPLE (5 <=5)
        32hFFFFFFFF,  // Test23: CMPLE (0xFFFFFFFF <=0)
        32h7FFFFFFF   // Test24: CMPLE (0x7FFFFFFF <=0x80000000)
    };
    
    // B values for test cases (32-bit hexadecimal)
    const B_TESTS = {
        // Arithmetic operations: ADD, SUB, MUL
        32h00000000,  // Test 0: B for ADD (0)
        32h00000003,  // Test 1: B for ADD (3)
        32h00000001,  // Test 2: B for ADD (1)
        32h00000003,  // Test 3: B for SUB (3)
        32h00000005,  // Test 4: B for SUB (5)
        32hFFFFFFFF,  // Test 5: B for SUB (-1)
        32h00000003,  // Test 6: B for MUL (3)
        32h00000002,  // Test 7: B for MUL (2)
        // Logical operations: AND, OR, XOR
        32h0000000F,  // Test 8: B for AND (0x0F)
        32h55555555,  // Test 9: B for AND (0x55555555)
        32hF0F0F0F0,  // Test10: B for OR (0xF0F0F0F0)
        32h55555555,  // Test11: B for XOR (0x55555555)
        // Load (LDR) - B is irrelevant
        32h00000000,  // Test12: B for LDR (0)
        // Shift operations: SHL, SHR, SRA
        32h00000001,  // Test13: B for SHL (1)
        32h00000001,  // Test14: B for SHL (1)
        32h00000001,  // Test15: B for SHR (1)
        32h00000001,  // Test16: B for SRA (1)
        32h00000005,  // Test17: B=5
        32h00000003,  // Test18: B=3
        32h00000005,  // Test19: B=5
        32h00000003,  // Test20: B=3
        32h00000001,  // Test21: B=1
        32h00000005,  // Test22: B=5
        32h00000000,  // Test23: B=0
        32h80000000   // Test24: B=0x80000000

    };
    
    // ALU function codes (6-bit binary)
    const ALUFN_TESTS = {
        // Arithmetic operations: ADD (6b000000), SUB (6b000001), MUL (6b000010)
        6b000000, 6b000000, 6b000000, 6b000001, 6b000001, 6b000001, 6b000010, 6b000010,
        // Logical operations: AND (6b011000), OR (6b011110), XOR (6b010110)
        6b011000, 6b011000, 6b011110, 6b010110,
        // Load (LDR: 6b011010)
        6b011010,
        // Shift operations: SHL (6b100000), SHR (6b100001), SRA (6b100011)
        6b100000, 6b100000, 6b100001, 6b100011,
        // Comparison operators
        6b110011,  // Test17: CMPEQ
        6b110011,  // Test18: CMPEQ
        6b110101,  // Test19: CMPLT
        6b110101,  // Test20: CMPLT
        6b110101,  // Test21: CMPLT
        6b110111,  // Test22: CMPLE
        6b110111,  // Test23: CMPLE
        6b110111   // Test24: CMPLE
    };
    
    // Expected ALU outputs (32-bit hexadecimal)
    const ALU_OUT_TESTS = {
        // Arithmetic results
        32h00000000, 32h00000008, 32h00000000,  // ADD Tests 0-2
        32h00000002, 32hFFFFFFFE, 32h00000000,  // SUB Tests 3-5
        32h0000000F, 32hFFFFFFFC,               // MUL Tests 6-7
        // Logical results
        32h0000000F, 32h00000000,               // AND Tests 8-9
        32hFFFFFFFF, 32hFFFFFFFF,               // OR/XOR Tests 10-11
        // Load result
        32h12345678,                            // LDR Test12
        // Shift results
        32h0000000A, 32h00000000,               // SHL Tests13-14
        32h40000000, 32hC0000000,              // SHR/SRA Tests15-16
        32h00000001,  // Test17: CMPEQ true
        32h00000000,  // Test18: CMPEQ false
        32h00000001,  // Test19: CMPLT true
        32h00000000,  // Test20: CMPLT false
        32h00000001,  // Test21: CMPLT true
        32h00000001,  // Test22: CMPLE true
        32h00000001,  // Test23: CMPLE true
        32h00000000   // Test24: CMPLE false
    };
    
    
    // Add error simulation input (using DIP switch 0[0] as error trigger)
    sig modified_alu_out[32]
    
    enum States{
        IDLE,
        RUN, 
        CHECK
        }
    
    // Store states in DFFs
    dff tester_state[3](#INIT(States.IDLE),.clk(clk));
    dff a_temp[32](.clk(clk), .rst(rst));
    dff b_temp[32](.clk(clk), .rst(rst));
    dff alufn[6](.clk(clk), .rst(rst));
    dff test_id[8](.clk(clk), .rst(rst));
    
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1))
    always {        
        // condition the io buttons, then take **rising** edges only
        io_button_cond.in = io_button
        io_button_edge.in = io_button_cond.out
              
        // Connect inputs to ALU 
        alu.a = a_temp.q; 
        alu.b = b_temp.q;
        alu.alufn = alufn.q 
        
        // Reset LEDs
        io_led = 3x{ {8h00} }        
        
        // Update the state on each cycle
        tester_state.d = tester_state.q
        delay_counter.d = delay_counter.q + 1;
        
        modified_alu_out = alu.out;  // Default value
        
        case (tester_state.q) {
            // Default state where it does nothing. Moves to load state when button is pressed.
            States.IDLE: 
                if (io_button_edge.out[1]) {
                    tester_state.d = States.RUN
                    test_id.d = 0; // Reset test_id
                    delay_counter.d = 0;
                } 
            States.RUN: 
                // Load test case from ROM
                // Load test case from ROM
                a_temp.d = A_TESTS[test_id.q];
                b_temp.d = B_TESTS[test_id.q];
                alufn.d = ALUFN_TESTS[test_id.q];

                
                // Stay in RUN state for test_delay
                if (delay_counter.q == TEST_DELAY - 1) {
                    tester_state.d = States.CHECK;
                    delay_counter.d = 0;
                } else {
                    delay_counter.d = delay_counter.q + 1;
                }
                
            States.CHECK:
                // Modify ALU output LSB when DIP[0][1] is high (error simulation)
                modified_alu_out = alu.out ^ c{31b0, io_dip[0][1]}  // Invert LSB
                // Compare ALU output with expected value
                if (modified_alu_out == ALU_OUT_TESTS[test_id.q]) {
                    io_led[1][7:0] = 8b11111111;  // Correct is on the right side
                } else {
                    io_led[2][7:0] =  8b11111111;  // Incorrect is on the left sie
                }
                
                // Handle delay counter and transitions
                if (delay_counter.q < TEST_DELAY - 1) {
                    delay_counter.d = delay_counter.q + 1;
                } else {
                    // After delay completes, check result
                    if (modified_alu_out == ALU_OUT_TESTS[test_id.q]) {
                        // Correct: Proceed to next test
                        test_id.d = test_id.q + 1;
                        if (test_id.q + 1 < $width(A_TESTS,0)) {
                            tester_state.d = States.RUN;
                        } else {
                            tester_state.d = States.IDLE;
                        }
                        delay_counter.d = 0;  // Reset for next RUN
                    } else {
                        // Error: Freeze delay_counter and wait for button press
                        delay_counter.d = TEST_DELAY - 1;  // Stop counter
                    }
                }

                // Check for button press to resume after error (any time after delay completes)
                if (delay_counter.q == TEST_DELAY - 1 && modified_alu_out != ALU_OUT_TESTS[test_id.q]) {
                    if (io_button_edge.out[1]) {  // Button pressed
                        test_id.d = test_id.q + 1;
                        if (test_id.q + 1 < $width(A_TESTS,0)) {
                            tester_state.d = States.RUN;
                            delay_counter.d = 0;  // Reset counter for RUN
                        } else {
                            tester_state.d = States.IDLE;
                        }
                    }
                }      
        }

        // 7-segment display shows test ID
        decimal_renderer.value = tester_state.q * 1000 + test_id.q;  // Format: S:0-2 T:000-999
        seg.values = decimal_renderer.digits
        io_segment = ~seg.seg
        io_select = ~seg.sel
    }
}