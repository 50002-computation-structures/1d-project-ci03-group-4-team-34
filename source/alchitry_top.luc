module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,            // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led[3][8],     // LEDs on IO Shield
    output io_segment[8],        // 7-segment LEDs on IO Shield
    output io_select[4],        // Digit select on IO Shield
    input io_button[5],      // 5 buttons on IO Shield
    input io_dip[3][8],      // DIP switches on IO Shield
    input btn_pancake_raw,
    input btn_milkshake_raw,
    input btn_start_raw
    
) {
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond   
        button_conditioner pancake_btn_cond(
            .clk(clk),
            .in(btn_pancake_raw),
            .out(btn_pancake)
        )
        
        button_conditioner milkshake_btn_cond(
            .clk(clk),
            .in(btn_milkshake_raw),
            .out(btn_milkshake)
        )
        
        button_conditioner start_btn_cond(
            .clk(clk),
            .in(btn_start_raw),
            .out(btn_start)
        )     
        
    }
    
    const CLK_FREQ = $is_sim() ? 1000 : 10000000 // put 1000 for sim, 10000000 otherwise in hardware
    
    // Mode selection signal
    sig use_manual  // Determines which tester to use
    
    sig io_led_mux
    sig io_segment_mux
    sig io_select_mux
    sig mux_alu_a[32]
    sig mux_alu_b[32]
    
    sig rd1[32]
    sig rd2[32]
    
    sig btn_pancake
    sig btn_milkshake
    sig btn_start
    
    /*asel_bsel_mux mux_inst(
        .clk(clk),
        // Suppose you have signals like rd1, rd2 for register file outputs:
        .rd1(rd1),
        .rd2(rd2),
        .asel_sel(asel), // from fsm
        .bsel_sel(bsel), // from fsm
        .alu_a(mux_alu_a),
        .alu_b(mux_alu_b)
    )
    
    fsm fsm_inst(
        .clk(clk),
        .rst(rst),
        .alu_a(mux_alu_a),
        .alu_b(mux_alu_b),
        .alu_out(alu_out),
        // other fsm signals ...
        .asel(asel),
        .bsel(bsel),
        // etc.
    )
    /*
    alu_manual_tester alu_manual(.clk(clk), .rst(rst), .io_button(io_button), .io_dip(io_dip), #CLK_FREQ(CLK_FREQ)) 
    game_top game(.clk(clk), .rst(rst), .io_button(io_button), .io_dip(io_dip), 
        .io_led(io_led_mux), .io_segment(io_segment), .io_select(io_select))    */
    
    
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = 8h00              // turn LEDs off
        usb_tx = usb_rx         // loop serial port
        
        use_manual = io_dip[0][0]  // DIP[0][0] selects mode
        
        // Mux outputs based on mode selection
        io_segment = use_manual ? alu_manual.io_segment : io_segment_mux
        io_select  = use_manual ? alu_manual.io_select  : io_select_mux
        io_led     = use_manual ? alu_manual.io_led     : io_led_mux
        
        // Instantiate game_top and route buttons and I/O outputs
}
}