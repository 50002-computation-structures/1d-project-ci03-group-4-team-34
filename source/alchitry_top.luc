module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,            // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led[3][8],     // LEDs on IO Shield
    output io_segment[8],
    output io_seg[3],        // 7-segment LEDs on IO Shield
    output io_select[4],        // Digit select on IO Shield
    input io_button[5],      // 5 buttons on IO Shield
    input io_dip[3][8]       // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond        
        
    }
    
    const CLK_FREQ = $is_sim() ? 1000 : 10000000 // put 1000 for sim, 10000000 otherwise in hardware
    
    // Mode selection signal
    sig use_manual  // Determines which tester to use
    
    alu_manual_tester alu_manual(.clk(clk), .rst(rst), .io_button(io_button), .io_dip(io_dip), #CLK_FREQ(CLK_FREQ)) 
    alu_automatic_tester alu_auto(.clk(clk), .rst(rst), .io_button(io_button), .io_dip(io_dip), #CLK_FREQ(CLK_FREQ)) 
    const CHAIN = 4
    const SPEED = 4
    // reset signal
    max7219_driver max7219_driver(#CHAIN(CHAIN), #SPEED(SPEED), .clk(clk), .rst(rst)) 
    
    const A = $reverse(b01110111)
    const B = $reverse(b00011111)
    const D = $reverse(b00111101)
    const E = $reverse(b01001111)
    const F = $reverse(b01000111)
    
    const TESTWORDS = {$reverse({c{CHAINx{B}}, c{CHAINx{E}}, c{CHAINx{E}}, c{CHAINx{E}}, 
                c{CHAINx{E}}, c{CHAINx{E}}, c{CHAINx{E}}, c{CHAINx{F}}}), 
       $reverse({c{CHAINx{D}}, c{CHAINx{E}}, c{CHAINx{A}}, c{CHAINx{D}}, c{CHAINx{B}}, 
                c{CHAINx{E}}, c{CHAINx{E}}, c{CHAINx{F}}})}
    //const TESTWORDS = {({B,E,E,E,E,E,E,F}),({D,E,A,D,B,E,E,F})}
    
    dff done(#INIT(0),.clk(clk))
    dff sample_index(#INIT(0), .clk(clk))
    counter delay(#SIZE(1), #DIV(27),.rst(rst), .clk(clk))
    edge_detector delay_edge(#RISE(1), #FALL(0), .clk(clk), .in(delay.value))
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = 8h00             // turn LEDs off
        io_seg = 3b000
        //usb_tx = usb_rx          // loop serial port
        
        // Use first DIP switch to select mode (1=manual, 0=auto)
        use_manual = io_dip[0][0]
        
        // Mux outputs based on mode selection
        io_segment = use_manual ? alu_manual.io_segment : alu_auto.io_segment
        io_select = use_manual ? alu_manual.io_select : alu_auto.io_select
        io_led = use_manual ? alu_manual.io_led : alu_auto.io_led
        reset_cond.in = ~rst_n   // input raw inverted reset signal
        rst = reset_cond.out     // conditioned reset
        
        led = c{3b0, io_button}  // connect buttons to LEDs
        
        usb_tx = usb_rx          // loop serial port
        
        
        io_seg = 8h00 
        io_select = 4h0 
        io_led = 3x{{h00}} 
        
        max7219_driver.send= 0
        
        // at first, it will show DEADBEEF
        max7219_driver.segment_values = TESTWORDS[done.q] // topmost row will display B for [1] or D for [0]
        
        
        // This is a test code, do not copy blindly 
        // check if done, display a new value immediately
        if (done.q == 0){
            done.d = max7219_driver.done
        }
        
        if (done.q & delay_edge.out) { // only change when ~1 second has passed
            sample_index.d = sample_index.q + 1
            max7219_driver.send = 1 // if new == 1, max7219 will refresh
            done.d = 0 // reset, so it loops back up
        }
        
        // ------- DEBUG SIGNALS ------ // 
        led = max7219_driver.debug_state
        led[7:4] = max7219_driver.debug_driver_state
        
        io_led[0] = max7219_driver.debug_data
        io_led[1] = max7219_driver.debug_address
        io_led[2] = max7219_driver.debug_writer // only view the data writer counter
        
        
        if (io_dip[2] == 8d1){
            io_led[2][7] = max7219_driver.max7219_data
            io_led[2][6] = max7219_driver.max7219_load
            io_led[2][5] = max7219_driver.max7219_clock
        }
        
        else if (io_dip[2] == 8d2){
            // show segments received by driver 
            io_led[1] = max7219_driver.debug_segment_current  
        }
        
        else if (io_dip[2] == 8d3){
            io_led[1] = max7219_driver.debug_segment_original
        }
        else if (io_dip[2] == 8d4){
            io_led[1] = max7219_driver.debug_digit_index_original
        }
        // -------------------------------- //
        
        
        // actual output
        io_seg[0] = max7219_driver.max7219_data // C48
        io_seg[1] = max7219_driver.max7219_load // C2
        io_seg[2] = max7219_driver.max7219_clock // C3
    }
}